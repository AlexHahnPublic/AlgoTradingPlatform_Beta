#!/usr/bin/python
# -*- coding: utf-8 -*-

#==========================================================
#=================+== execution.py ========================
#==========================================================

# Purpose
#----------------------------------------------------------
# This class hierarchy will represent a simulated order handling mechanism and
# ultimately tie into a brokerage or other means of market connectivity. It
# will behave relatively simply in terms of filling all orders at the current
# market price (which is highly unrealistic and therefore ignores, slippage,
# certain market risks, and liquidity issues). However it is a good framework
# to build off of.

from __future__ import print_function

from abc import ABCMeta, abstractmethod
import datetime as dt
try:
    import Queue as queue
except ImportError:
    import queue

from event import FillEvent, OrderEvent


class ExecutionHandler(object):
    """
    The ExecutionHandler abstract class handles the interaction between a set
    of order objects generated by a Portfolio and the ultimate set of Fill
    objects that actually occur in the market.

    The handlers can be used to subclass simulated brokerages or live
    brokerages with identical interfaces. This allows strategies to be
    backtested in a very similar manner to the live trading engine.
    """

    __metaclass__ = ABCMeta

    @abstractmethod
    def execute_order(self, event):
        """
        Takes an Order event and executes it, producing a Fill event that gets
        placed onto the Events queue.

        Parameters:
            event - Contains and Event object with order information
        """

        raise NotImplentedError("Should implement execute_order()")

class SimulatedExecutionHandler(ExecutionHandler):
    """
    The simulated execution handler simply converts all order objects into
    their equivalent fill objects automatically without latency, slippage or
    fill-ratio issues.

    This is unrealistic compared to market, brokerage, or
    exchange execution but allows a straightforward "first go" test of any
    strategy before implementation with a more sophisticated execution handler.
    """

    def __init__(self, events):
        """
        Initializes the handler, setting the event queues up internally.

        Parameters:
            events - The Queue of Event objects
        """

        self.events = events

    def execute_order(self, event):
        """
        Simply converts Order objects into Fill objects in a naive manner (no
        market movement/slippage risk, fill ratio, or other execution
        commonalities).

        Parameters:
            event - Contains an Event object with order information
        """

        if event.type == 'ORDER':
            fill_event = FillEvent(
                dt.datetime.utcnow(), event.symbol,
                'ARCA', event.quantity, event.direction, None
            )
            self.events.put(fill_event)
