#!/usr/bin/python
# -*- coding: utf-8 -*-

#==========================================================
#===================== strategy.py ========================
#==========================================================

# Purpose
#----------------------------------------------------------
# Strategy will take care of all calculation and analysis methodologies that
# will in turn generate advisory signals to a portfolio. The hierarchy will
# include an abstract base class along with a single pure virtual method for
# generating SignalEvent objects

from __future__ import print_function

from abc import print_function

from abc import ABCMeta, abstractmethod
import datetime
try:
    import Queue as queue 
except ImportError:
    import queue

import numpy as np
import pandas as pd

from event import SignalEvent

class Strategy(object):
    """
    Strategy is an abstract base class providing an interface for all
    subsequent (inherited) strategy handling objects.

    Th goal of a (derived) Strategy object is to generate Signal objects for
    particular symbol based on the inputs of Bars (OHLCV) generated by a
    DataHandler object.

    This is designed to work both with historic and live data as the Strategy
    object is agnostic to where the data comes from, since it will always
    obtain only bar tuples from a queue object.
    """

    __metaclass__ = ABCMeta

    @abstractmethod
    def calculate_signals(self):
        """
        Provides the mechanisms to calculate the list of signals
        """
        raise NotImplementedError("Should implement calculate _signals()")

